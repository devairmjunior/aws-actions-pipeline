name: Terraform Deployment

on:
  push:
    branches:
      - main
      - 'feature/*'

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      ########################################################################
      # 1. Checkout do repositório
      ########################################################################
      - name: Checkout repository
        uses: actions/checkout@v3

      ########################################################################
      # 2. Ler o arquivo terraform-config.yml para saber se deve destruir
      ########################################################################
      - name: Parse terraform-config.yml
        id: parse_config
        run: |
          set -eux
          # Instala yq caso não exista
          if ! command -v yq &> /dev/null; then
            echo "Installing yq..."
            sudo wget https://github.com/mikefarah/yq/releases/download/v4.33.3/yq_linux_amd64 -O /usr/local/bin/yq
            sudo chmod +x /usr/local/bin/yq
          fi
          DESTROY_VALUE=$(yq e '.destroy' terraform-config.yml)
          echo "Destroy value: $DESTROY_VALUE"
          echo "DESTROY=$DESTROY_VALUE" >> $GITHUB_ENV

      ########################################################################
      # 3. Configurar credenciais AWS
      ########################################################################
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      ########################################################################
      # 4. Setup Terraform
      ########################################################################
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      ########################################################################
      # 5. Garantir que o bucket S3 do backend existe
      ########################################################################
      - name: Ensure S3 Backend Exists
        run: |
          set -eux
          BUCKET_NAME="terraform-state-bucket-devair"
          REGION="us-east-2"

          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Creating bucket: $BUCKET_NAME"
            aws s3api create-bucket --bucket "$BUCKET_NAME" --region "$REGION" \
              --create-bucket-configuration LocationConstraint="$REGION"
          else
            echo "Bucket already exists: $BUCKET_NAME"
          fi

          aws s3api put-bucket-versioning --bucket "$BUCKET_NAME" \
            --versioning-configuration Status=Enabled

      ########################################################################
      # 6. Terraform Init (usando backend remoto no S3)
      ########################################################################
      - name: Terraform Init
        run: |
          set -eux
          terraform init \
            -backend-config="bucket=terraform-state-bucket-devair" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=us-east-2"

      ########################################################################
      # 7. Criar secrets.auto.tfvars com os valores de secret
      ########################################################################
      - name: Create TFVars file
        run: |
          set -eux
          echo "whatsapp_token = \"${{ secrets.WHATSAPP_TOKEN }}\"" > secrets.auto.tfvars
          echo "verify_token   = \"${{ secrets.VERIFY_TOKEN }}\"" >> secrets.auto.tfvars
          echo "gemini_api_key = \"${{ secrets.GEMINI_API_KEY }}\"" >> secrets.auto.tfvars

      ########################################################################
      # 8. Terraform Plan
      ########################################################################
      - name: Terraform Plan
        run: |
          set -eux
          terraform plan

      ########################################################################
      # 9. Terraform Apply (caso DESTROY != 'true')
      ########################################################################
      - name: Terraform Apply
        if: ${{ env.DESTROY != 'true' }}
        run: |
          set -eux
          terraform apply -auto-approve

      ########################################################################
      # 10. Terraform Destroy (caso DESTROY == 'true')
      ########################################################################
      - name: Terraform Destroy
        if: ${{ env.DESTROY == 'true' }}
        run: |
          set -eux
          terraform destroy -auto-approve
